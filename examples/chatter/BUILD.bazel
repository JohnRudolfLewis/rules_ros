"""Implements an example to demonstrate:

- Defining ROS messages.
- Generating C++ and Python ROS message definitions.
- Defining C++ and Python ROS nodes.
- Defining a ROS deployment -- i.e. a ROS-launch Bazel target.
- Defining a Docker images for the example ROS deployment.
- Defining a Bazel target for running ROS-topic introspection functionality.
"""

load("//docker:image.bzl", "container_image")
load("//ros:cc_defs.bzl", "cc_ros_binary")
load("//ros:launch.bzl", "ros_launch")
load(
    "//ros:interfaces.bzl",
    "cc_ros_interface_library",
    "py_ros_interface_library",
    "ros_interface_library",
)
load("//ros:test.bzl", "ros_test")
load("//ros:topic.bzl", "ros_topic")
load("//third_party:packaging.bzl", "binary_pkg_tar")
load("@io_bazel_rules_docker//container:container.bzl", "container_push")
load("@rules_python//python:defs.bzl", "py_binary")

# Handling of ROS messages & services resembles to some extent Bazel's rules for
# handling protobuf messages (e.g. proto_library and cc_proto_library).

# Defines a library of ROS messages. Can be used for services as well.
ros_interface_library(
    name = "example_msgs",
    srcs = ["Example.msg"],
    deps = ["@ros_std_msgs//:std_msgs"],
)

# Defines a C++ library made of auto-generated code from the given messages.
cc_ros_interface_library(
    name = "cc_example_msgs",
    visibility = ["//visibility:public"],
    deps = [":example_msgs"],
)

# Defines a Python library made of auto-generated code from the given messages.
py_ros_interface_library(
    name = "py_example_msgs",
    visibility = ["//visibility:public"],
    deps = [":example_msgs"],
)

# Defines a talker ROS node.
cc_ros_binary(
    name = "talker",
    srcs = [
        "talker.cc",
    ],
    deps = [
        ":cc_example_msgs",
        "@ros_comm//:roscpp_lib",
    ],
)

# Defines tests for the talker node.
ros_test(
    name = "talker_tests",
    launch_file = "talker_tests.launch",
    nodes = [
        ":talker",
        "//third_party/legacy_rostest:advertisetest",
        "//third_party/legacy_rostest:publishtest",
    ],
)

# Defines a C++ listener ROS node.
cc_ros_binary(
    name = "listener",
    srcs = [
        "listener.cc",
    ],
    deps = [
        ":cc_example_msgs",
        "@ros_comm//:roscpp_lib",
    ],
)

# Defines a Python listener ROS node.
py_binary(
    name = "py_listener",
    srcs = ["listener.py"],
    main = "listener.py",
    deps = [
        ":py_example_msgs",
        "@ros_comm//:rospy",
    ],
)

# Defines a launch target with talker and listener. Just run as
# `bazel run //examples/chatter:chatter`. This will build the two nodes,
# the deployment and start the launcher.
ros_launch(
    name = "chatter",
    launch_files = [":chatter.launch"],
    nodes = [
        ":talker",
        ":listener",
    ],
)

# Define a Docker image target with chatter deployment. Just run as
# `bazel run //examples/chatter:chatter_image`. This will build the nodes,
# the Docker image, and start execution of the deployment inside a container.
container_image(
    name = "chatter_image",
    base = "@ros_deploy_base//image",
    binary = ":chatter",
    docker_run_flags = "-it --rm --network=host",
)

# Here is how a chatter image can be published to a remote repo.
container_push(
    name = "chatter_publish",
    format = "Docker",
    image = ":chatter_image",
    registry = "docker.io",
    repository = "mvukov/chatter",
    tag = "demo",
)

# catkin workflow gives to rostopic app ability to handle all messages that
# live the devel/install workspace. With Bazel workflow we don't have that.
# Here, rostopic is deployment-specific.
# Example usage: `bazel run //examples/chatter:rostopic -- echo /chatter`
ros_topic(
    name = "rostopic",
    deps = [":chatter"],
)

# Builds an archive out of the deployment and it's dependencies.
binary_pkg_tar(
    name = "chatter_pkg",
    binary = ":chatter",
)
